1,12c1,12
< *******************************************************************************
< * initialize data
<       subroutine force_constants_init(lattparams,primlatt,natoms_in,
<      $     iatomtype,atompos_in)
< 
< * arguments:
< *     lattparams(i) (input), lattice parameters a,b,c,alpha,beta,gamma
< *     primlatt(i,j) (input), ith dimensionless coordinate of jth basis vector
< *          of the primitive lattice
< *     natoms_in (input), number of atoms in the primitive unit cell
< *     iatomtype(i) (input), type of ith atom, numbered 1,2,3,etc.
< *     atompos_in(j,i) (input), jth dimensionless coordinate of the ith atom
---
> !******************************************************************************
> ! initialize data
>       subroutine force_constants_init(lattparams,primlatt,natoms_in, &
>      &     iatomtype,atompos_in)
> 
> ! arguments:
> !     lattparams(i) (input), lattice parameters a,b,c,alpha,beta,gamma
> !     primlatt(i,j) (input), ith dimensionless coordinate of jth basis vector
> !          of the primitive lattice
> !     natoms_in (input), number of atoms in the primitive unit cell
> !     iatomtype(i) (input), type of ith atom, numbered 1,2,3,etc.
> !     atompos_in(j,i) (input), jth dimensionless coordinate of the ith atom
20,24c20,24
<       integer i,j,k,m,n,i1,i2,i3,j1,j2,j3,nd2save,ncmp,nshell,
<      $     natoms_in,iatomtype(natoms_in),ier,ifractcount,iatom,
<      $     iatom2,itype2,iatom3,ipntop,
<      $     itype,isg,iatom0,iop,icell(3),
<      $     iop_matrix(3,3,48)
---
>       integer i,j,k,m,n,i1,i2,i3,j1,j2,j3,nd2save,ncmp,nshell,   &
>      &     natoms_in,iatomtype(natoms_in),ier,ifractcount,iatom,   &
>      &     iatom2,itype2,iatom3,ipntop,   &
>      &     itype,isg,iatom0,iop,icell(3),   &
>      &     iop_matrix(3,3,48)
26,30c26,30
<       double precision d2save(maxneighbors),r(3),d2, d2r,
<      $     lattparams(6),primlatt(3,3),      tempi(3,3),latp(6),
<      $     conv_to_cart(3,3),prim_to_cart(3,3),cart_to_prim(3,3),
<      $     prim_to_conv(3,3),conv_to_prim(3,3),atompos_in(3,natoms_in),
<      $     atomposconv(3,natoms_in),fract(3),v(3),v2(3),temp(3,3)
---
>       double precision d2save(maxneighbors),r(3),d2, d2r,   &
>      &     lattparams(6),primlatt(3,3),      tempi(3,3),latp(6),   &
>      &     conv_to_cart(3,3),prim_to_cart(3,3),cart_to_prim(3,3),   &
>      &     prim_to_conv(3,3),conv_to_prim(3,3),atompos_in(3,natoms_in),   &
>      &     atomposconv(3,natoms_in),fract(3),v(3),v2(3),temp(3,3)
34c34
<       d2r = 4d0*atan(1d0)/180d0 ! 3.1415926535897932384626/180d0
---
>       d2r = 4d0*datan(1d0)/180d0 ! 3.1415926535897932384626/180d0
36,38c36,38
< *-----------------------------------------------------------------------------
< * some preliminary stuff
< * copy input arguments into global variables
---
> !-------------------------------------------------------------------------------
> ! some preliminary stuff
> ! copy input arguments into global variables
42c42
< * allocate memory
---
> ! allocate memory
51c51
< * get primitive lattice vectors in terms of conventional lattice vectors
---
> ! get primitive lattice vectors in terms of conventional lattice vectors
55,56c55,56
<         write(6,*)'Error in force_constants_init: primitive_lattice '
<      $       //'is singular'
---
>         write(6,*)'Error in force_constants_init: primitive_lattice '   &
>      &       //'is singular'
59c59
< * get conventional lattice parameters in cartesian coordinates
---
> ! get conventional lattice parameters in cartesian coordinates
62c62
<       latp(4:6) = latp(4:6)*d2r   ! convert angles from degree to radian
---
> !     latp(4:6) = latp(4:6)*d2r   ! convert angles from degree to radian
64,71c64,70
<       conv_to_cart(1,2)=latp(2)*dcos(latp(6))
<       conv_to_cart(2,2)=latp(2)*dsin(latp(6))
<       conv_to_cart(1,3)=latp(3)*dcos(latp(5))
<       conv_to_cart(2,3)=latp(3)*(dcos(latp(4))
<      $     -dcos(latp(6))*dcos(latp(5)))
<      $     /dsin(latp(6))
<       conv_to_cart(3,3)=sqrt(latp(3)**2-conv_to_cart(1,3)**2
<      $     -conv_to_cart(2,3)**2)
---
>       conv_to_cart(1,2)=latp(2)*dcosd(latp(6))
>       conv_to_cart(2,2)=latp(2)*dsind(latp(6))
>       conv_to_cart(1,3)=latp(3)*dcosd(latp(5))
>       conv_to_cart(2,3)=latp(3)*(dcosd(latp(4))   &
>      &     -dcosd(latp(6))*dcosd(latp(5)))  /dsind(latp(6))
>       conv_to_cart(3,3)=sqrt(latp(3)**2-conv_to_cart(1,3)**2   &
>      &     -conv_to_cart(2,3)**2)
73c72
< * get primitive lattice parameters in cartesian coordinates
---
> ! get primitive lattice parameters in cartesian coordinates
77,78c76,77
<         write(6,*)'Error in force_constants_init: primitive_lattice '
<      $       //'is singular'
---
>         write(6,*)'Error in force_constants_init: primitive_lattice '   &
>      &       //'is singular'
94c93
< * get atomic positions in cartesian coordinates
---
> ! get atomic positions in cartesian coordinates
101,102c100
<         call unitcell(cart_to_prim,prim_to_cart,atompos(1,i),
<      $       atompos(1,i))
---
>         call unitcell(cart_to_prim,prim_to_cart,atompos(1,i), atompos(1,i))
107,109c105,107
< *-----------------------------------------------------------------------------
< * find symmetry of crystal.
< * find point group of lattice, and # of point group symmetry opterations: lattpgcount
---
> !-------------------------------------------------------------------------------
> ! find symmetry of crystal.
> ! find point group of lattice
127c125
< * find transformation matrices for k vectors
---
> ! find transformation matrices for k vectors
153,154d150
<             call flush(30)
<             stop
165,166c161,162
< * find elements of space group
< * count them
---
> ! find elements of space group
> ! count them
168c164
< * try each element of point group of lattice
---
> ! try each element of point group of lattice
170,171c166,167
< * operate on atom 1.  v contains the coordinates of the atom after
< * the operation
---
> ! operate on atom 1.  v contains the coordinates of the atom after
> ! the operation
173c169
< * try to map the rotated atom 1 onto every other atom of the same type
---
> ! try to map the rotated atom 1 onto every other atom of the same type
176c172
< * find the fractional translation required in the space group element
---
> ! find the fractional translation required in the space group element
178,180c174,175
<             call unitcell(cart_to_prim,prim_to_cart,
<      +           fract,fract)
< * now try this space group element on every other atom
---
>             call unitcell(cart_to_prim,prim_to_cart, fract,fract)
> ! now try this space group element on every other atom
183,187c178,181
< * operate on the atom: rotation followed by a fractional translation
< * v contains the coordinates of the atom after the operation by the space
< * group element.
<               call xvmlt(op_matrix(1,1,ipntop),atompos(1,iatom2),v2,
<      $             3,3,3)
---
> ! operate on the atom: rotation followed by a fractional translation
> ! v contains the coordinates of the atom after the operation by the space
> ! group element.
>               call xvmlt(op_matrix(1,1,ipntop),atompos(1,iatom2),v2, 3,3,3)
190c184
< * try to find another atom of the same type with these coordinates
---
> ! try to find another atom of the same type with these coordinates
194,196c188,189
< * this one isn't it, try another one
<                     if(ncmp(v2(i)-atompos(i,iatom3)).ne.0)
<      $                   cycle iatom3loop2
---
> ! this one isn't it, try another one
>                     if(ncmp(v2(i)-atompos(i,iatom3)).ne.0)  cycle iatom3loop2
198c191
< * we found it, try the space group element on another atom
---
> ! we found it, try the space group element on another atom
201c194
< * try to find another atom (iatom3)
---
> ! try to find another atom (iatom3)
203c196
< * did not find it, try mapping atom 1 onto another atom
---
> ! did not find it, try mapping atom 1 onto another atom
205c198
< * try the space group element on the next atom (iatom2)
---
> ! try the space group element on the next atom (iatom2)
207,208c200,201
< * space group element was successful for every atom, save it
< * count them
---
> ! space group element was successful for every atom, save it
> ! count them
210c203
< * save rotation part of element
---
> ! save rotation part of element
212c205
< * save translational part of element
---
> ! save translational part of element
216c209
< * do next element of point group
---
> ! do next element of point group
218c211
< * try mapping atom 1 onto another atom
---
> ! try mapping atom 1 onto another atom
221,222c214,215
< * this element is not in space group
< * do next element of point group (ipg)
---
> ! this element is not in space group
> ! do next element of point group (ipg)
224,226c217,219
< *--------------------------------------------------------------------------
< * find operators that take atoms into atoms in the primitive unit cell
< * do each atom
---
> !----------------------------------------------------------------------------
> ! find operators that take atoms into atoms in the primitive unit cell
> ! do each atom
229c222
< * do each element of space group
---
> ! do each element of space group
232,234c225,226
< * operate on position of atom iatom
<           call xvmlt(op_matrix(1,1,ipntop),atompos(1,iatom),v,
<      $         3,3,3)
---
> ! operate on position of atom iatom
>           call xvmlt(op_matrix(1,1,ipntop),atompos(1,iatom),v,3,3,3)
237c229
< * look for atom
---
> ! look for atom
241,242c233
<                 if(ncmp(v2(i)-atompos(i,iatom2)).ne.0)
<      $               cycle iatom2loop3
---
>                 if(ncmp(v2(i)-atompos(i,iatom2)).ne.0)  cycle iatom2loop3
244c235
< * found it.  save it if not already previously found
---
> ! found it.  save it if not already previously found
247,248c238
<                 call xvsub(atompos(1,iatom),v,
<      $               atomopfract(1,iatom,iatom2),3)
---
>                 call xvsub(atompos(1,iatom),v, atomopfract(1,iatom,iatom2),3)
251c241
< * try to match another atom (iatom2)
---
> ! try to match another atom (iatom2)
254c244
< * next space group element
---
> ! next space group element
256c246
< * next atom (iatom)
---
> ! next atom (iatom)
258,260c248,250
< *-----------------------------------------------------------------------------
< * collect nearest neighbor atoms
< * do each atom in primitive unit cell
---
> !-------------------------------------------------------------------------------
> ! collect nearest neighbor atoms
> ! do each atom in primitive unit cell
264,265c254,255
< * collect distances to nearest neighbors
< * do one shell of unit cells at a time
---
> ! collect distances to nearest neighbors
> ! do one shell of unit cells at a time
271,272c261,262
<             if(iabs(i1).ne.n.and.iabs(i2).ne.n.and.iabs(i3).ne.n)cycle
< * do each atom in unit cell
---
>             if(iabs(i1).ne.n.and.iabs(i2).ne.n.and.iabs(i3).ne.n)cycle ! only 8 terms in the sum
> ! do each atom in unit cell
274c264
< * skip the atom at the origin
---
> ! skip the atom at the origin
276c266
< * position of atom and distance squared
---
> ! position of atom and distance squared
278c268
<               d2=0
---
>               d2=0  ! d2 = Ri+tau_i-tau_j
280,282c270,271
<                 r(j)=atompos(j,i)+i1*prim_to_cart(j,1)
<      $               +i2*prim_to_cart(j,2)+i3*prim_to_cart(j,3)
<      $               -atompos(j,iatom0)
---
>                 r(j)=atompos(j,i)+i1*prim_to_cart(j,1)  &
>      &               +i2*prim_to_cart(j,2)+i3*prim_to_cart(j,3) -atompos(j,iatom0)
285c274
< * did we find any new ones in this shell?
---
> ! did we find any new ones in this shell?
288,289c277
<               else if(ncmp(d2-d2save(nd2save)).eq.0.or.
<      $               d2.lt.d2save(nd2save))then
---
>               else if(ncmp(d2-d2save(nd2save)).eq.0.or.  d2.lt.d2save(nd2save))then
292c280
< * compare distance to atom with previously found distances
---
> ! compare distance to atom with previously found distances
294c282
< * same distance: do another atom
---
> ! same distance: do another atom
296c284
< * new distance: insert into list
---
> ! new distance: insert into list
306c294
< * new distance: insert at end of list if list is not already full
---
> ! new distance: insert at end of list if list is not already full
315c303
< * no new atom found in shell:  save previous shell and exit loop
---
> ! no new atom found in shell:  save previous shell and exit loop
320c308
< * list is filled
---
> ! list is filled
322c310
< * we reached the last shell before we finished the list
---
> ! we reached the last shell before we finished the list
329,331c317,319
< *---------------------------------------------------------------------------
< * generate positions of neighbors
< * do each shell of unit cells
---
> !-----------------------------------------------------------------------------
> ! generate positions of neighbors
> ! do each shell of unit cells
340c328
< * do each atom in unit cell
---
> ! do each atom in unit cell
342c330
< * skip atom at origin
---
> ! skip atom at origin
344c332
< * position of atom
---
> ! position of atom
348,349c336,337
<                 r(j)=atompos(j,i)+i1*prim_to_cart(j,1)
<      $               +i2*prim_to_cart(j,2)+i3*prim_to_cart(j,3)
---
>                 r(j)=atompos(j,i)+i1*prim_to_cart(j,1)  &
>      &               +i2*prim_to_cart(j,2)+i3*prim_to_cart(j,3)
352c340
< * find in list
---
> ! find in list
359,360c347,348
<                       write(6,*)'Warning: in force_constants_init:  '
<      $                     //'the value of maxatoms needs to be larger.'
---
>                       write(6,*)'Warning: in force_constants_init:  '   &
>      &                     //'the value of maxatoms needs to be larger.'
378c366
< * next inequivalent atom
---
> ! next inequivalent atom
382,421c370,409
< *******************************************************************************
< * get force constants
<       subroutine force_constants(nrank,iatomd,ixyzd,
<      $     ntermsindep,iatomtermindep,ixyztermindep,
<      $     nterm5,iatomtermall,ixyztermall,amat,ntermszero,
<      $     iatomtermzero,ixyztermzero,
<      $     maxrank,maxterms,maxtermsindep,maxtermszero,ierz,iert,ieri)
< * find relationships between terms of the form d^nU/dxidxjdxk...
< * where U is the total energy of the crystal and xi is a coordinate (x=x,y,z)
< * of the ith atom.
< 
< * arguments:
< *     nrank (input), order of derivative
< *     iatomd(i) (input), atom at ith location in denominator
< *     ixyzd(i) (input), coordinate (1,2,3=x,y,z) at ith location in denominator
< *     ntermsindep (output), number of independent terms
< *     iatomtermindep(i,j) (output), atom at ith location in denominator of
< *          jth independent term
< *     ixyztermindep(i,j) (output), coordinate at ith location in denomonitor
< *          of jth independent term
< *     nterm5 (output), total number of nonzero terms
< *     iatomtermall(i,j) (output), atom at ith location in denominator of
< *          jth nonzero term
< *     ixyztermall(i,j) (output), coordinate at ith location in denomonitor of 
< *          jth nonzero term
< *     amat(i,j) (output), coefficient of jth independent term in equation for
< *          kth nonzero term
< *     ntermszero (output), number of zero terms generated
< *     iatomtermzero(i,j) (output), atom at ith location in denominator of
< *          jth zero term
< *     ixyztermzero(i,j) (output), coordinate at ith location in denomonitor
< *          of jth zero term
< *     maxrank (input), number of rows in arrays iatomtermindep, ixyztermindep,
< *          iatomtermall, ixyztermall, iatomtermzero and ixyztermzero
< *     maxterms (input), number of columns in arrays iatomtermall and
< *          ixyztermall
< *     maxtermsindep (input), number of columns in arrays iatomtermindep and
< *          ixyztermindep
< *     maxtermszero (input), number columns in arrays iatomtermzero and
< *          ixyztermzero
---
> !******************************************************************************
> ! get force constants
>       subroutine force_constants(nrank,iatomd,ixyzd,   &
>      &     ntermsindep,iatomtermindep,ixyztermindep,   &
>      &     nterm5,iatomtermall,ixyztermall,amat,ntermszero,   &
>      &     iatomtermzero,ixyztermzero,   &
>      &     maxrank,maxterms,maxtermsindep,maxtermszero,ierz,iert,ieri)
> ! find relationships between terms of the form d^nU/dxidxjdxk...
> ! where U is the total energy of the crystal and xi is a coordinate (x=x,y,z)
> ! of the ith atom.
> 
> ! arguments:
> !     nrank (input), order of derivative
> !     iatomd(i) (input), atom at ith location in denominator
> !     ixyzd(i) (input), coordinate (1,2,3=x,y,z) at ith location in denominator
> !     ntermsindep (output), number of independent terms
> !     iatomtermindep(i,j) (output), atom at ith location in denominator of
> !          jth independent term
> !     ixyztermindep(i,j) (output), coordinate at ith location in denomonitor
> !          of jth independent term
> !     nterm5 (output), total number of nonzero terms
> !     iatomtermall(i,j) (output), atom at ith location in denominator of
> !          jth nonzero term
> !     ixyztermall(i,j) (output), coordinate at ith location in denomonitor of 
> !          jth nonzero term
> !     amat(i,j) (output), coefficient of jth independent term in equation for
> !          kth nonzero term
> !     ntermszero (output), number of zero terms generated
> !     iatomtermzero(i,j) (output), atom at ith location in denominator of
> !          jth zero term
> !     ixyztermzero(i,j) (output), coordinate at ith location in denomonitor
> !          of jth zero term
> !     maxrank (input), number of rows in arrays iatomtermindep, ixyztermindep,
> !          iatomtermall, ixyztermall, iatomtermzero and ixyztermzero
> !     maxterms (input), number of columns in arrays iatomtermall and
> !          ixyztermall
> !     maxtermsindep (input), number of columns in arrays iatomtermindep and
> !          ixyztermindep
> !     maxtermszero (input), number columns in arrays iatomtermzero and
> !          ixyztermzero
427,438c415,426
<       integer i,j,k,m,n,iatomd(nrank),ixyz(nrank),iatom(nrank),ncmp,
<      $   iatomterm(maxrank,maxterms),ixyzterm(maxrank,maxterms),jterm,
<      $     icell(3),iv(3),isg,ixyzd(nrank),ntermsindep,msave,nn,
<      $     irank,k2,neqs,ipermute(:,:),ifactorial,msave2,j2,
<      $     npermute,ixyzfirst(nrank),nterm5,ixyz4(nrank),
<      $     mapdep(maxterms),mapterms(maxterms),
<      $     maptermsindep(maxterms),mapindepterms(maxterms),
<      $   iatomtermall(maxrank,maxterms),ixyztermall(maxrank,maxterms),
<      $     iatomtermindep(maxrank,maxterms),
<      $     ixyztermindep(maxrank,maxterms),
<      $     ntermszero,iatomtermzero(maxrank,maxtermszero),
<      $     ixyztermzero(maxrank,maxtermszero)
---
>       integer i,j,k,m,n,iatomd(nrank),ixyz(nrank),iatom(nrank),ncmp,   &
>      &   iatomterm(maxrank,maxterms),ixyzterm(maxrank,maxterms),jterm,   &
>      &     icell(3),iv(3),isg,ixyzd(nrank),ntermsindep,msave,nn,   &
>      &     irank,k2,neqs,ipermute(:,:),ifactorial,msave2,j2,   &
>      &     npermute,ixyzfirst(nrank),nterm5,ixyz4(nrank),   &
>      &     mapdep(maxterms),mapterms(maxterms),   &
>      &     maptermsindep(maxterms),mapindepterms(maxterms),   &
>      &   iatomtermall(maxrank,maxterms),ixyztermall(maxrank,maxterms),   &
>      &     iatomtermindep(maxrank,maxterms),   &
>      &     ixyztermindep(maxrank,maxterms),   &
>      &     ntermszero,iatomtermzero(maxrank,maxtermszero),   &
>      &     ixyztermzero(maxrank,maxtermszero)
440,441c428,429
<       double precision v(3),amp,eqs(:,:),
<      $     eqs2(:,:),amat(maxterms,maxtermsindep)
---
>       double precision v(3),amp,eqs(:,:),   &
>      &     eqs2(:,:),amat(maxterms,maxtermsindep)
445c433
< * check if input values are valid
---
> ! check if input values are valid
460c448
< * get permutations of nrank items
---
> ! get permutations of nrank items
476,477c464,465
< *        write(6,*)jterm,nterm5
< * do each space-group operator
---
> !        write(6,*)jterm,nterm5
> ! do each space-group operator
488c476
< * operate on each item in denominator
---
> ! operate on each item in denominator
490,491c478,479
<           call xvmlt(op_matrix(1,1,isgop(isg)),
<      $         atompos(1,iatomterm(irank,jterm)),v,3,3,3)
---
>           call xvmlt(op_matrix(1,1,isgop(isg)),  &
>      &         atompos(1,iatomterm(irank,jterm)),v,3,3,3)
493c481
< * find atom
---
> ! find atom
502c490
< * rotate coordinates
---
> ! rotate coordinates
525,526c513
<               if(ncmp(op_matrix(ixyz4(k),ixyzterm(k,jterm),isgop(isg)))
<      $             .ne.0)exit
---
>               if(ncmp(op_matrix(ixyz4(k),ixyzterm(k,jterm),isgop(isg))) .ne.0)exit
533c520
< * amplitude
---
> ! amplitude
539c526
< * get unique denominator
---
> ! get unique denominator
541c528
< * look for variable
---
> ! look for variable
544,546c531,532
<               if(iatomterm(k,i).ne.iatom(k).or.ixyzterm(k,i).ne.ixyz(k))
<      $             exit
< * foundit: add in amp
---
>               if(iatomterm(k,i).ne.iatom(k).or.ixyzterm(k,i).ne.ixyz(k))  exit
> ! foundit: add in amp
552c538
< * did not find it: add it and add in amp
---
> ! did not find it: add it and add in amp
556,557c542
<                 write(6,*)
<      $      'Warning: in force_constants: maxterms too small',maxterms
---
>            write(6,*) 'Warning: in force_constants: maxterms too small',maxterms
568c553
< * next space-group operator
---
> ! next space-group operator
570c555
< * solve simultaneous equations
---
> ! solve simultaneous equations
572c557
< * find number of equations
---
> ! find number of equations
582c567
< * next seed
---
> ! next seed
585c570
< * put terms in order
---
> ! put terms in order
621c606
< * find independent and dependent terms
---
> ! find independent and dependent terms
635c620
< * save independent terms
---
> ! save independent terms
641,642c626
<             write(6,*)
<      $           'Warning: in force_constants: maxtermsindep too small'
---
>        write(6,*) 'Warning: in force_constants: maxtermsindep too small'
649,652c633,634
<           iatomtermindep(1:nrank,ntermsindep)=
<      $         iatomterm(1:nrank,mapterms(i))
<           ixyztermindep(1:nrank,ntermsindep)=
<      $         ixyzterm(1:nrank,mapterms(i))
---
>           iatomtermindep(1:nrank,ntermsindep)= iatomterm(1:nrank,mapterms(i))
>           ixyztermindep(1:nrank,ntermsindep)=  ixyzterm(1:nrank,mapterms(i))
655c637
< * no independent terms: all terms are zero
---
> ! no independent terms: all terms are zero
670c652
< * look for zero terms
---
> ! look for zero terms
682c664
< * do each term
---
> ! do each term
686c668
< * find all permutations
---
> ! find all permutations
693c675
< * look for it
---
> ! look for it
701c683
< * new term: add it
---
> ! new term: add it
711c693
< * find all translations
---
> ! find all translations
715,716c697
<             if(iatomcell0(iatomtermall(j2,i)).eq.iatomtermall(j2,i))
<      $           cycle
---
>             if(iatomcell0(iatomtermall(j2,i)).eq.iatomtermall(j2,i))  cycle
718c699
< * move atoms and identify them
---
> ! move atoms and identify them
723,724c704
<               call findatom(icell,iatomcell0(iatomtermall(k,i)),
<      $             iatomtermall(k,m+1))
---
>               call findatom(icell,iatomcell0(iatomtermall(k,i)), iatomtermall(k,m+1))
731c711
< * look for it
---
> ! look for it
739c719
< * new term: add it
---
> ! new term: add it
750c730
< * zero terms
---
> ! zero terms
753,754c733
<             write(6,*)'Warning: in force_constants: maxtermszero '
<      $           //'too small'
---
>          write(6,*)'Warning: in force_constants: maxtermszero too small'
759,762c738,741
<           iatomtermzero(1:nrank,ntermszero+1:ntermszero+m-msave)=
<      $         iatomtermall(1:nrank,msave+1:m)
<           ixyztermzero(1:nrank,ntermszero+1:ntermszero+m-msave)=
<      $         ixyztermall(1:nrank,msave+1:m)
---
>           iatomtermzero(1:nrank,ntermszero+1:ntermszero+m-msave)=   &
>      &         iatomtermall(1:nrank,msave+1:m)
>           ixyztermzero(1:nrank,ntermszero+1:ntermszero+m-msave)=   &
>      &         ixyztermall(1:nrank,msave+1:m)
765c744
< * independent terms
---
> ! independent terms
768c747
< * dependent terms
---
> ! dependent terms
782,820c761,799
< *****************************************************************************
< * get force constants for a given rank out to a given nearest neighbor shell
<       subroutine collect_force_constants_old(nrank,nshell,ngroups,
<      $     ntermsindep,iatomtermindep,ixyztermindep,nterm6,
<      $     iatomterm,ixyzterm,amat,ntermszero,iatomtermzero,
<      $     ixyztermzero,maxrank,maxterms,maxtermsindep,maxtermszero,
<      $     maxgroups,ierz,iert,ieri,ierg)
< * arguments:
< *     nrank (input), order or derivative
< *     nshell (input), shell of nearest-neighbor atoms to be included
< *     ngroups (output), number of groups of terms.  Within each group, the
< *          terms are related by symmetry.
< *     For the ith group:
< *     ntermsindep(i) (output), number of independent terms
< *     iatomtermindep(k,j,i) (output), atom at kth location in denominator of
< *          jth independent term
< *     ixyztermindep(k,j,i) (output), coordinate at kth location in denomonitor 
< *          of jth independent term
< *     nterm6(i) (output), total number of terms
< *     iatomterm(k,j,i) (output), atom at kth location in denominators of
< *          jth term
< *     ixyzterm(k,j,i) (output), coordinate at kth location in denomonitor of 
< *          jth term
< *     amat(k,j,i) (output), coefficient of jth independent term in equation
< *          for kth term
< *     ntermszero (output), number of zero terms
< *     iatomtermzero(k,j) (output), atom at kth location in denominator of
< *          jth zero term
< *     ixyztermzero(k,j) (output), coordinate at kth location in denomonitor 
< *          of jth zero term
< *     maxrank (input), number of rows in arrays iatomtermindep, ixyztermindep,
< *          iatomterm, and ixyzterm
< *     maxterms (input), number of rows in array amat and number of columns
< *          in arrays iatomterm and ixyzterm
< *     maxtermsindep (input), number of columns
< *          in arrays amat, iatomtermindep, and ixyztermindep
< *     maxtermszero (input), number of columns
< *          in arrays iatomtermzero and ixyztermzero
< *     maxgroups (input), maximum number of groups
---
> !****************************************************************************
> ! get force constants for a given rank out to a given nearest neighbor shell
>       subroutine collect_force_constants_old(nrank,nshell,ngroups,  &
>      &     ntermsindep,iatomtermindep,ixyztermindep,nterm6,   &
>      &     iatomterm,ixyzterm,amat,ntermszero,iatomtermzero,   &
>      &     ixyztermzero,maxrank,maxterms,maxtermsindep,maxtermszero,   &
>      &     maxgroups,ierz,iert,ieri,ierg)
> ! arguments:
> !     nrank (input), order or derivative
> !     nshell (input), shell of nearest-neighbor atoms to be included
> !     ngroups (output), number of groups of terms.  Within each group, the
> !          terms are related by symmetry.
> !     For the ith group:
> !     ntermsindep(i) (output), number of independent terms
> !     iatomtermindep(k,j,i) (output), atom at kth location in denominator of
> !          jth independent term
> !     ixyztermindep(k,j,i) (output), coordinate at kth location in denomonitor 
> !          of jth independent term
> !     nterm6(i) (output), total number of terms
> !     iatomterm(k,j,i) (output), atom at kth location in denominators of
> !          jth term
> !     ixyzterm(k,j,i) (output), coordinate at kth location in denomonitor of 
> !          jth term
> !     amat(k,j,i) (output), coefficient of jth independent term in equation
> !          for kth term
> !     ntermszero (output), number of zero terms
> !     iatomtermzero(k,j) (output), atom at kth location in denominator of
> !          jth zero term
> !     ixyztermzero(k,j) (output), coordinate at kth location in denomonitor 
> !          of jth zero term
> !     maxrank (input), number of rows in arrays iatomtermindep, ixyztermindep,
> !          iatomterm, and ixyzterm
> !     maxterms (input), number of rows in array amat and number of columns
> !          in arrays iatomterm and ixyzterm
> !     maxtermsindep (input), number of columns
> !          in arrays amat, iatomtermindep, and ixyztermindep
> !     maxtermszero (input), number of columns
> !          in arrays iatomtermzero and ixyztermzero
> !     maxgroups (input), maximum number of groups
824,835c803,814
<       integer nrank,maxrank,maxterms,maxtermsindep,maxgroups,
<      $     maxtermszero,ierz,iert,ieri,ierg
<       integer i,j,k,m,n,nshell,ngroups,nterm6(maxgroups),
<      $     iatomterm(maxrank,maxterms,maxgroups),ncount,
<      $     ixyzterm(maxrank,maxterms,maxgroups),
<      $     iatomtermindep(maxrank,maxterms,maxgroups),
<      $     ixyztermindep(maxrank,maxterms,maxgroups),
<      $     ishell,iatom,iatom0,iatomd(nrank),ixyz,ngroupsave,
<      $     ixyzd(nrank),nterms2,ncmp,icell(3),
<      $     ntermsindep(maxgroups),iatomd2(nrank),ixyzd2(nrank),
<      $     ntermszero,iatomtermzero(maxrank,maxtermszero),
<      $     ixyztermzero(maxrank,maxtermszero),ntermszerosave
---
>       integer nrank,maxrank,maxterms,maxtermsindep,maxgroups,  &
>      &     maxtermszero,ierz,iert,ieri,ierg
>       integer i,j,k,m,n,nshell,ngroups,nterm6(maxgroups),  &
>      &     iatomterm(maxrank,maxterms,maxgroups),ncount,  &
>      &     ixyzterm(maxrank,maxterms,maxgroups),  &
>      &     iatomtermindep(maxrank,maxterms,maxgroups),  &
>      &     ixyztermindep(maxrank,maxterms,maxgroups),  &
>      &     ishell,iatom,iatom0,iatomd(nrank),ixyz,ngroupsave,  &
>      &     ixyzd(nrank),nterms2,ncmp,icell(3),  &
>      &     ntermsindep(maxgroups),iatomd2(nrank),ixyzd2(nrank),  &
>      &     ntermszero,iatomtermzero(maxrank,maxtermszero),  &
>      &     ixyztermzero(maxrank,maxtermszero),ntermszerosave
846c825
< * check if input values are valid
---
> ! check if input values are valid
856c835
< * do each atom in unit cell
---
> ! do each atom in unit cell
858c837
< * find first nearest neighbor in list
---
> ! find first nearest neighbor in list
862,863c841,842
<             write(6,*)'Error in collect_force_constants_old: first '
<      $           //'nearest neighbor not found'
---
>             write(6,*)'Error in collect_force_constants_old: first '  &
>      &           //'nearest neighbor not found'
867,868c846,847
< * try each atom for each position in denominator
< * begin with first nearest neighbor
---
> ! try each atom for each position in denominator
> ! begin with first nearest neighbor
874c853
< * next set of atoms
---
> ! next set of atoms
880c859
< * try each position in denominator
---
> ! try each position in denominator
882c861
< * try each atom in that position
---
> ! try each atom in that position
884c863
< * nearest neighbor to atom in cell at origin?
---
> ! nearest neighbor to atom in cell at origin?
886c865
< * nearest neighbor to all other atoms in denominator?
---
> ! nearest neighbor to all other atoms in denominator?
893,894c872
<                   if(iatomneighbor(iatomcell0(j),m).gt.nshell)
<      $                 cycle jloop
---
>                   if(iatomneighbor(iatomcell0(j),m).gt.nshell)  cycle jloop
896c874
< * yes: put atom in denominator and get terms
---
> ! yes: put atom in denominator and get terms
901c879
< * done: try next atom in cell at origin
---
> ! done: try next atom in cell at origin
904c882
< * check if found yet
---
> ! check if found yet
912c890
< * found it: try next set of atoms
---
> ! found it: try next set of atoms
920c898
< * found it: try next set of atoms
---
> ! found it: try next set of atoms
923,924c901,902
< * did not find it: generate terms
< * all possible sets of coordinates
---
> ! did not find it: generate terms
> ! all possible sets of coordinates
933,935c911,912
< * check if found yet
<             call unique_force_constant(nrank,iatomd,ixyzd,
<      $           iatomd2,ixyzd2)
---
> ! check if found yet
>             call unique_force_constant(nrank,iatomd,ixyzd, iatomd2,ixyzd2)
942c919
< * found it: try next set of coordinates
---
> ! found it: try next set of coordinates
951c928
< * found it: try next set of coordinates
---
> ! found it: try next set of coordinates
954c931
< * did not find it: generate terms
---
> ! did not find it: generate terms
963,969c940,946
<             call force_constants(nrank,iatomd2,ixyzd2,
<      $           ntermsindep(ngroups),iatomtermindep(1,1,ngroups),
<      $           ixyztermindep(1,1,ngroups),nterm6(ngroups),
<      $           iatomterm(1,1,ngroups),ixyzterm(1,1,ngroups),
<      $           amat(1,1,ngroups),n,iatomtermzero(1,ntermszero+1),
<      $           ixyztermzero(1,ntermszero+1),maxrank,maxterms,
<      $           maxtermsindep,maxtermszero-ntermszero,ierz,iert,ieri)
---
>             call force_constants(nrank,iatomd2,ixyzd2,   &
>      &           ntermsindep(ngroups),iatomtermindep(1,1,ngroups),   &
>      &           ixyztermindep(1,1,ngroups),nterm6(ngroups),   &
>      &           iatomterm(1,1,ngroups),ixyzterm(1,1,ngroups),   &
>      &           amat(1,1,ngroups),n,iatomtermzero(1,ntermszero+1),   &
>      &           ixyztermzero(1,ntermszero+1),maxrank,maxterms,   &
>      &           maxtermsindep,maxtermszero-ntermszero,ierz,iert,ieri)
984c961
< * no nonzero terms in group
---
> ! no nonzero terms in group
989c966
< * next set of coordinates
---
> ! next set of coordinates
991c968
< * next set of atoms
---
> ! next set of atoms
998c975
<       write(*,3)' iatomtrmindep(rnk,1,ngroups)=',  
---
>       write(*,3)' iatomtrmindep(rnk,1,ngroups)=',   &
1000c977
<       write(*,3)' ixyztermindep(rnk,1,ngroups)=',  
---
>       write(*,3)' ixyztermindep(rnk,1,ngroups)=',   &
1002c979
<       write(*,3)' iatomterm    (rnk,1,ngroups)=',  
---
>       write(*,3)' iatomterm    (rnk,1,ngroups)=',   &
1004c981
<       write(*,3)' ixyzterm     (rnk,1,ngroups)=',
---
>       write(*,3)' ixyzterm     (rnk,1,ngroups)=',   &
1011,1021c988,997
< *****************************************************************************
< * bring a force constant to a unique form: atoms
<       subroutine unique_force_constant(nrank,iatomin,ixyzin,iatomout,
<      $     ixyzout)
< 
< * arguments:
< *     nrank (input), order of derivative
< *     iatomin(i) (input), atom at ith location in denominator
< *     ixyzin(i) (input), x,y,z coordinate of atom
< *     iatomout(i) (output), atom at ith location in denominator
< *     ixyzout(i) (output), x,y,z coordinate of atom
---
> !****************************************************************************
> ! bring a force constant to a unique form: atoms
>       subroutine unique_force_constant(nrank,iatomin,ixyzin,iatomout,ixyzout)
> 
> ! arguments:
> !     nrank (input), order of derivative
> !     iatomin(i) (input), atom at ith location in denominator
> !     ixyzin(i) (input), x,y,z coordinate of atom
> !     iatomout(i) (output), atom at ith location in denominator
> !     ixyzout(i) (output), x,y,z coordinate of atom
1026,1029c1002,1005
<       integer i,j,k,m,n,iatomin(nrank),iatomout(nrank),
<      $     iatomtemp(nrank),irank,iv(3),icell(3),iatom,k2,k3,
<      $     iatomtemp2(nrank),ixyzin(nrank),ixyzout(nrank),
<      $     ixyztemp(nrank),ixyztemp2(nrank),ixyz
---
>       integer i,j,k,m,n,iatomin(nrank),iatomout(nrank),  &
>      &     iatomtemp(nrank),irank,iv(3),icell(3),iatom,k2,k3,  &
>      &     iatomtemp2(nrank),ixyzin(nrank),ixyzout(nrank),  &
>      &     ixyztemp(nrank),ixyztemp2(nrank),ixyz
1033c1009
< * bring atom in each item to unit cell at origin
---
> ! bring atom in each item to unit cell at origin
1036c1012
< * move atoms and identify them
---
> ! move atoms and identify them
1047c1023
< * put atoms in order
---
> ! put atoms in order
1049,1051c1025,1027
<             if(iatomtemp(k).lt.iatomtemp(k2).or.
<      $           (iatomtemp(k).eq.iatomtemp(k2).and.
<      $           ixyztemp(k).lt.ixyztemp(k2)))then
---
>             if(iatomtemp(k).lt.iatomtemp(k2).or.  &
>      &           (iatomtemp(k).eq.iatomtemp(k2).and.  &
>      &           ixyztemp(k).lt.ixyztemp(k2))) then
1064c1040
< *compared with saved term
---
> !compared with saved term
1096,1097c1072,1073
< *****************************************************************************
< * routines
---
> !****************************************************************************
> ! routines
1099,1105c1075,1081
< * find atom in data base
< * arguments:
< *     icell(i) (input), linear combination of basis vectors of the primitive
< *          lattice that takes us to the unit cell containing the ith atom
< *     icell0 (input), identity of equivalent atom in unit cell at origin
< *     iatom (output), location of atom in data base.  Returns zero if not found
< *          in data base
---
> ! find atom in data base
> ! arguments:
> !     icell(i) (input), linear combination of basis vectors of the primitive
> !          lattice that takes us to the unit cell containing the ith atom
> !     icell0 (input), identity of equivalent atom in unit cell at origin
> !     iatom (output), location of atom in data base.  Returns zero if not found
> !          in data base
1121c1097
< *------------------------------------------------------------------------------
---
> !--------------------------------------------------------------------------------
1123,1127c1099,1103
< * find atom in data base
< * arguments:
< *     pos(i) (input), ith cartesian coordinate of atomic position
< *     iatom (output), location of atom in data base.  Returns zero if not found
< *          in data base
---
> ! find atom in data base
> ! arguments:
> !     pos(i) (input), ith cartesian coordinate of atomic position
> !     iatom (output), location of atom in data base.  Returns zero if not found
> !          in data base
1143c1119
< *------------------------------------------------------------------------------
---
> !--------------------------------------------------------------------------------
1146,1151c1122,1127
< *
< *	COMPARE X WITH ZERO
< *	NCMP=0 IF X IS CLOSE ENOUGH TO ZERO
< *	NCMP=1 OTHERWISE
< *	X IS REAL
< *
---
> !
> !	COMPARE X WITH ZERO
> !	NCMP=0 IF X IS CLOSE ENOUGH TO ZERO
> !	NCMP=1 OTHERWISE
> !	X IS REAL
> !
1157c1133
<       if(abs(x).gt.1d-4)ncmp=1
---
>       if(abs(x).gt.1d-6)ncmp=1
1160c1136
< *------------------------------------------------------------------------------
---
> !--------------------------------------------------------------------------------
1164c1140
< * invert a 3 by 3 matrix
---
> ! invert a 3 by 3 matrix
1169c1145
< * dimension of matrix
---
> ! dimension of matrix
1171c1147
< * clear error flag
---
> ! clear error flag
1180c1156
< * decomposition
---
> ! decomposition
1182c1158
< * singular matrix
---
> ! singular matrix
1187c1163
< * inverse matrix
---
> ! inverse matrix
1193c1169
< * The following routines are from Numerical Recipes
---
> ! The following routines are from Numerical Recipes
1209c1185
< * singular matrix
---
> ! singular matrix
1285c1261
< *----------------------------------------------------------------------------
---
> !------------------------------------------------------------------------------
1288,1300c1264,1276
< * multiply two real matrices, x3=x1*x2
< * double precision version
< * arguments:
< *     x1,x2 (input), first and second matrix
< *     x3 (output), product x1*x2
< *     nrow1 (input), number of rows in x1, also the number of rows in x3
< *     ncol1 (input), number of columns in x1, also the number of
< *          rows in x2
< *     ncol2 (input), number of columns in x2, also the number of
< *          columns in x3
< *     nr1 (input), number of rows in the physical array x1
< *     nr2 (input), number of rows in the physical array x2
< *     nr3 (input), number of rows in the physical array x3
---
> ! multiply two real matrices, x3=x1*x2
> ! double precision version
> ! arguments:
> !     x1,x2 (input), first and second matrix
> !     x3 (output), product x1*x2
> !     nrow1 (input), number of rows in x1, also the number of rows in x3
> !     ncol1 (input), number of columns in x1, also the number of
> !          rows in x2
> !     ncol2 (input), number of columns in x2, also the number of
> !          columns in x3
> !     nr1 (input), number of rows in the physical array x1
> !     nr2 (input), number of rows in the physical array x2
> !     nr3 (input), number of rows in the physical array x3
1323c1299
< *-----------------------------------------------------------------------------
---
> !-------------------------------------------------------------------------------
1326,1333c1302,1309
< * multiply a double precision vector by a double precision matrix, v2=x*v1
< * arguments:
< *     x (input), matrix
< *     v1 (input), vector
< *     v2 (output), product x*v1
< *     nrow (input), number of rows in x, also the number of rows in v2
< *     ncol (input), number of columns in x, also the number of rows in v1
< *     nr (input), number of rows in the physical array x
---
> ! multiply a double precision vector by a double precision matrix, v2=x*v1
> ! arguments:
> !     x (input), matrix
> !     v1 (input), vector
> !     v2 (output), product x*v1
> !     nrow (input), number of rows in x, also the number of rows in v2
> !     ncol (input), number of columns in x, also the number of rows in v1
> !     nr (input), number of rows in the physical array x
1350,1351c1326,1327
< *----------------------------------------------------------------------------
< * bring a point into the unit cell at the origin
---
> !------------------------------------------------------------------------------
> ! bring a point into the unit cell at the origin
1355,1356c1331,1332
<       double precision cart_to_prim(3,3),prim_to_cart(3,3),v1(3),
<      +     v2(3),buff(3)
---
>       double precision cart_to_prim(3,3),prim_to_cart(3,3),v1(3),  &
>      &     v2(3),buff(3)
1358,1359c1334,1335
< * change coordinates of point to linear combination of basis vectors of the
< * primitive lattice
---
> ! change coordinates of point to linear combination of basis vectors of the
> ! primitive lattice
1361,1362c1337,1338
< * in the unit cell at the origin, the coefficient must be greater than or
< * equal to zero and less than one.
---
> ! in the unit cell at the origin, the coefficient must be greater than or
> ! equal to zero and less than one.
1371c1347
< * return to cartesian coordinates
---
> ! return to cartesian coordinates
1374c1350
< *--------------------------------------------------------------------------
---
> !----------------------------------------------------------------------------
1377c1353
< * find symmetry matrices for a given lattice
---
> ! find symmetry matrices for a given lattice
1379,1383c1355,1359
< * arguments:
< *     cart(i,j) (input), ith cartesian component of jth basis vector
< *     eps (input), tolerance for length
< *     nmatrices (output), number of matrices
< *     matrices(i,j,k) (output), kth matrix
---
> ! arguments:
> !     cart(i,j) (input), ith cartesian component of jth basis vector
> !     eps (input), tolerance for length
> !     nmatrices (output), number of matrices
> !     matrices(i,j,k) (output), kth matrix
1390,1394c1366,1370
<       integer n,i,j,j1,j2,j3,k,m,i1,i2,i3,nshort(3),ndet,itrans(3,3),
<      $     nmatrices,matrices(3,3,48),ichoose(3)
<       double precision eps, dshort(nmax,3),ishort(3,nmax,3),
<      $     vshort(3,nmax,3),v(3),xmax, vlength,x,dvdot,d,abc(3,3),
<      $     cart(3,3)
---
>       integer n,i,j,j1,j2,j3,k,m,i1,i2,i3,nshort(3),ndet,itrans(3,3),  &
>      &     nmatrices,matrices(3,3,48),ichoose(3)
>       double precision eps, dshort(nmax,3),ishort(3,nmax,3),  &
>      &     vshort(3,nmax,3),v(3),xmax, vlength,x,dvdot,d,abc(3,3),  &
>      &     cart(3,3)
1397c1373
< * some initialization
---
> ! some initialization
1414c1390
< * longest lattice parameter
---
> ! longest lattice parameter
1416,1417c1392,1393
< * try each shell until every vector in a shell is longer than the longest
< * lattice parameter
---
> ! try each shell until every vector in a shell is longer than the longest
> ! lattice parameter
1421c1397
< * find all lattice vectors in shell
---
> ! find all lattice vectors in shell
1426c1402
< * length of lattice vector
---
> ! length of lattice vector
1434c1410
< * if shorter than longest lattice parameter, then do next shell too
---
> ! if shorter than longest lattice parameter, then do next shell too
1436c1412
< * check each lattice parameter a,b,c
---
> ! check each lattice parameter a,b,c
1438c1414
< * equal to length of lattice parameter to within tolerance
---
> ! equal to length of lattice parameter to within tolerance
1440c1416
< * count them
---
> ! count them
1446c1422
< * length
---
> ! length
1448c1424
< * dimensionless coordinates
---
> ! dimensionless coordinates
1452c1428
< * cartesian coordinates
---
> ! cartesian coordinates
1458c1434
< * next vector in shell
---
> ! next vector in shell
1463c1439
< * next shell
---
> ! next shell
1466c1442
< * try mappings of basis vectors onto vectors the "same" length
---
> ! try mappings of basis vectors onto vectors the "same" length
1477c1453
< * determinant of the transformation matrix must be equal to 1
---
> ! determinant of the transformation matrix must be equal to 1
1479c1455
< * lengths of differences of lattice vectors must match to within tolerance
---
> ! lengths of differences of lattice vectors must match to within tolerance
1487,1489c1463,1465
< * found a transformation:  count them and save it
< * if this is the identity op, just put it into the first matrix where we
< * have reserved a place for it
---
> ! found a transformation:  count them and save it
> ! if this is the identity op, just put it into the first matrix where we
> ! have reserved a place for it
1500c1476
< * next mapping
---
> ! next mapping
1504c1480
< * find any additional matrices by multiplication
---
> ! find any additional matrices by multiplication
1513c1489,1490
<               call matmlt(matrices(1,1,i),matrices(1,1,j),itrans)
---
> !             call matmlt(matrices(1,1,i),matrices(1,1,j),itrans)
>               itrans=matmul(matrices(:,:,i),matrices(:,:,j)) 
1525,1526c1502,1503
<                     write(6,*)'Error in dlatmat2: '//
<      $                   'more than 48 point operators'
---
>                     write(6,*)'Error in dlatmat2: '//  &
>      &                   'more than 48 point operators'
1537c1514
< *------------------------------------------------------------------------------
---
> !--------------------------------------------------------------------------------
1540,1545c1517,1522
< * subtract two real vectors: v3=v1-v2
< * double precision version
< * arguments:
< *     v1,v2 (input), vectors
< *     v3 (output), vector v1-v2
< *     nrow (input), number of rows in each vector
---
> ! subtract two real vectors: v3=v1-v2
> ! double precision version
> ! arguments:
> !     v1,v2 (input), vectors
> !     v3 (output), vector v1-v2
> !     nrow (input), number of rows in each vector
1554c1531
< *----------------------------------------------------------------------------
---
> !------------------------------------------------------------------------------
1557,1562c1534,1539
< * add two real vectors: v3=v1+v2
< * double precision version
< * arguments:
< *     v1,v2 (input), vectors
< *     v3 (output), vector v1+v2
< *     nrow (input), number of rows in each vector
---
> ! add two real vectors: v3=v1+v2
> ! double precision version
> ! arguments:
> !     v1,v2 (input), vectors
> !     v3 (output), vector v1+v2
> !     nrow (input), number of rows in each vector
1571c1548
< *-----------------------------------------------------------------------------
---
> !-------------------------------------------------------------------------------
1583c1560
< *-----------------------------------------------------------------------------
---
> !-------------------------------------------------------------------------------
1590c1567
< *----------------------------------------------------------------------------
---
> !------------------------------------------------------------------------------
1593,1595c1570,1572
< *
< *	FIND THE DETERMINANT OF A 3X3 MATRIX MAT
< *
---
> !
> !	FIND THE DETERMINANT OF A 3X3 MATRIX MAT
> !
1597,1599c1574,1576
<       ndet=mat(1,1)*(mat(2,2)*mat(3,3)-mat(2,3)*mat(3,2))
<      +-mat(1,2)*(mat(2,1)*mat(3,3)-mat(2,3)*mat(3,1))
<      ++mat(1,3)*(mat(2,1)*mat(3,2)-mat(2,2)*mat(3,1))
---
>       ndet=mat(1,1)*(mat(2,2)*mat(3,3)-mat(2,3)*mat(3,2))  &
>      & -mat(1,2)*(mat(2,1)*mat(3,3)-mat(2,3)*mat(3,1))  &
>      & +mat(1,3)*(mat(2,1)*mat(3,2)-mat(2,2)*mat(3,1))
1602,1620c1579
< *----------------------------------------------------------------------------
<       subroutine matmlt(mat1,mat2,mat3)
<       implicit none
< *
< *	MULTIPLY TWO 3X3 MATRICES
< *	MAT3=MAT1*MAT2
< *
<       integer mat1(3,3),mat2(3,3),mat3(3,3),mat4(3,3),j,k,l
<       do 1 j=1,3
<       do 1 k=1,3
<       mat4(j,k)=0
<       do 1 l=1,3
< 1     mat4(j,k)=mat4(j,k)+mat1(j,l)*mat2(l,k)
<       do 2 j=1,3
<       do 2 k=1,3
< 2     mat3(j,k)=mat4(j,k)
<       return
<       end
< *----------------------------------------------------------------------------
---
> !------------------------------------------------------------------------------
1622,1627c1581,1586
< * find all permutations of n objects
< * arguments:
< *     n (input), number of objects
< *     ipermutations(i,j) (output), object in ith location of jth permutation
< *     nr (input), number of rows in ipermutations
< *     nc (input), number of columns in ipermutations
---
> ! find all permutations of n objects
> ! arguments:
> !     n (input), number of objects
> !     ipermutations(i,j) (output), object in ith location of jth permutation
> !     nr (input), number of rows in ipermutations
> !     nc (input), number of columns in ipermutations
1631,1632c1590
<       integer n,ipermutations(nr,nc),ip(10),np,ifactorial,
<      $     i,j,k,m,mm,kk,nexc,ip2(10)
---
>       integer n,ipermutations(nr,nc),ip(10),np,ifactorial, i,j,k,m,mm,kk,nexc,ip2(10)
1635c1593
< * check for valid input
---
> ! check for valid input
1649c1607
< * first permutation
---
> ! first permutation
1654c1612
< * done if only one object
---
> ! done if only one object
1656c1614
< * mark which objects are used in the first n-1 locations
---
> ! mark which objects are used in the first n-1 locations
1659c1617
< * count permutations
---
> ! count permutations
1661,1663c1619,1622
< * try changing the object in a location, starting at location n-1
<  1    do i=n-1,1,-1
< * moving this object: not at this location anymore
---
> ! try changing the object in a location, starting at location n-1
>     loop1: do while (np.lt.nc) 
>       do i=n-1,1,-1
> ! moving this object: not at this location anymore
1665c1624
< * look for a vacant location
---
> ! look for a vacant location
1667c1626
< * found one
---
> ! found one
1669c1628
< * put object in that location
---
> ! put object in that location
1672c1631
< * put the remaining objects in the remaining locations
---
> ! put the remaining objects in the remaining locations
1686c1645
< * count permutations and save it
---
> ! count permutations and save it
1689c1648
<             goto 1
---
>             cycle loop1 !goto 1
1692a1652
>     enddo loop1
1694,1695c1654,1655
< *-----------------------------------------------------------------------------
< * factorial:  ifactorial = n!
---
> !-------------------------------------------------------------------------------
> ! factorial:  ifactorial = n!
1712c1672
< *-----------------------------------------------------------------------------
---
> !-------------------------------------------------------------------------------
1715,1718c1675,1678
< *
< *	DO ROW OPERATIONS ON MATRIX ZNA TO BRING IT TO UPPER TRIANGULAR FORM
< *	DOUBLE PRECISION NUMBERS
< *
---
> !
> !	DO ROW OPERATIONS ON MATRIX ZNA TO BRING IT TO UPPER TRIANGULAR FORM
> !	DOUBLE PRECISION NUMBERS
> !
1722,1723c1682,1683
< *
< *	TRANSFORM MATRIX BY ROWS
---
> !
> !	TRANSFORM MATRIX BY ROWS
1725c1685
<       do 1 j=1,nrow
---
>    do j=1,nrow
1727c1687
< *	PUT NON-ZERO ELEMENTS ON DIAGONAL
---
> !	PUT NON-ZERO ELEMENTS ON DIAGONAL
1729,1731c1689,1692
<       do 2 k=j+1,nrow
< 2     if(ncmp(zna(k,j+nout)).ne.0)goto 3
< *	IF COLUMN HAS ALL ZEROES, GO TO NEXT COLUMN
---
>       do  k=j+1,nrow
>       if(ncmp(zna(k,j+nout)).ne.0)goto 3
>       enddo
> !	IF COLUMN HAS ALL ZEROES, GO TO NEXT COLUMN
1734,1735c1695,1696
< *	INTERCHANGE ROWS
< 3     do 6 l=1,ncol
---
> !	INTERCHANGE ROWS
> 3     do l=1,ncol
1738,1739c1699,1701
< 6     zna(k,l)=zntemp
< *	NORMALIZE ELEMENTS IN ROW
---
>       zna(k,l)=zntemp
>       enddo
> !	NORMALIZE ELEMENTS IN ROW
1741,1748c1703,1711
<       do 20 k=j+nout,ncol
< 20    zna(j,k)=zna(j,k)/zntemp
< *	REDUCE ALL OTHER ROWS
<       do 7 k=1,nrow
<       if(k.eq.j)goto 7
<       if(ncmp(zna(k,j+nout)).eq.0)goto 7
<       do 8 l=1,ncol
<       if(l.eq.j+nout)goto 8
---
>       do k=j+nout,ncol
>       zna(j,k)=zna(j,k)/zntemp
>       enddo
> !	REDUCE ALL OTHER ROWS
>       do  k=1,nrow
>         if(k.eq.j) cycle
>         if(ncmp(zna(k,j+nout)).eq.0) cycle
>         do  l=1,ncol
>           if(l.eq.j+nout) cycle 
1750c1713
< 8     continue
---
>         enddo
1752,1753c1715,1716
< 7     continue
< 1     continue
---
>       enddo
>   enddo
1756c1719
< *-----------------------------------------------------------------------------
---
> !-------------------------------------------------------------------------------
1758,1760c1721,1723
< * find atom in data base
< * arguments:
< *     kvec(i) (input), ith dimensionless component of k vector
---
> ! find atom in data base
> ! arguments:
> !     kvec(i) (input), ith dimensionless component of k vector
1767,1768c1730,1731
<       double precision kvec(3),kvecstar(3,48),primlatt(3,3),v(3),
<      $     v2(3),v3(3),kvecstarp(3,48)
---
>       double precision kvec(3),kvecstar(3,48),primlatt(3,3),v(3),  &
>      &     v2(3),v3(3),kvecstarp(3,48)
1794,1832c1757,1795
< *****************************************************************************
< * get force constants for a given rank out to a given nearest neighbor shell
<       subroutine collect_force_constants(nrank,nshell,ngroups,
<      $     ntermsindep,iatomtermindep,ixyztermindep,nterm6,
<      $     iatomterm,ixyzterm,amat,ntermszero,iatomtermzero,
<      $     ixyztermzero,maxrank,maxterms,maxtermsindep,maxtermszero,
<      $     maxgroups,ierz,iert,ieri,ierg)
< * arguments:
< *     nrank (input), order or derivative
< *     nshell (input), shell of nearest-neighbor atoms to be included
< *     ngroups (output), number of groups of terms.  Within each group, the
< *          terms are related by symmetry.
< *     For the ith group:
< *     ntermsindep(i) (output), number of independent terms
< *     iatomtermindep(k,j,i) (output), atom at kth location in denominator of
< *          jth independent term
< *     ixyztermindep(k,j,i) (output), coordinate at kth location in denomonitor 
< *          of jth independent term
< *     nterm6(i) (output), total number of terms
< *     iatomterm(k,j,i) (output), atom at kth location in denominators of
< *          jth term
< *     ixyzterm(k,j,i) (output), coordinate at kth location in denomonitor of 
< *          jth term
< *     amat(k,j,i) (output), coefficient of jth independent term in equation
< *          for kth term
< *     ntermszero (output), number of zero terms
< *     iatomtermzero(k,j) (output), atom at kth location in denominator of
< *          jth zero term
< *     ixyztermzero(k,j) (output), coordinate at kth location in denomonitor 
< *          of jth zero term
< *     maxrank (input), number of rows in arrays iatomtermindep, ixyztermindep,
< *          iatomterm, and ixyzterm
< *     maxterms (input), number of rows in array amat and number of columns
< *          in arrays iatomterm and ixyzterm
< *     maxtermsindep (input), number of columns
< *          in arrays amat, iatomtermindep, and ixyztermindep
< *     maxtermszero (input), number of columns
< *          in arrays iatomtermzero and ixyztermzero
< *     maxgroups (input), maximum number of groups
---
> !****************************************************************************
> ! get force constants for a given rank out to a given nearest neighbor shell
>       subroutine collect_force_constants(nrank,nshell,ngroups,  &
>      &     ntermsindep,iatomtermindep,ixyztermindep,nterm6,  &
>      &     iatomterm,ixyzterm,amat,ntermszero,iatomtermzero,  &
>      &     ixyztermzero,maxrank,maxterms,maxtermsindep,maxtermszero,  &
>      &     maxgroups,ierz,iert,ieri,ierg)
> ! arguments:
> !     nrank (input), order or derivative
> !     nshell (input), shell of nearest-neighbor atoms to be included
> !     ngroups (output), number of groups of terms.  Within each group, the
> !          terms are related by symmetry.
> !     For the ith group:
> !     ntermsindep(i) (output), number of independent terms
> !     iatomtermindep(k,j,i) (output), atom at kth location in denominator of
> !          jth independent term
> !     ixyztermindep(k,j,i) (output), coordinate at kth location in denomonitor 
> !          of jth independent term
> !     nterm6(i) (output), total number of terms
> !     iatomterm(k,j,i) (output), atom at kth location in denominators of
> !          jth term
> !     ixyzterm(k,j,i) (output), coordinate at kth location in denomonitor of 
> !          jth term
> !     amat(k,j,i) (output), coefficient of jth independent term in equation
> !          for kth term
> !     ntermszero (output), number of zero terms
> !     iatomtermzero(k,j) (output), atom at kth location in denominator of
> !          jth zero term
> !     ixyztermzero(k,j) (output), coordinate at kth location in denomonitor 
> !          of jth zero term
> !     maxrank (input), number of rows in arrays iatomtermindep, ixyztermindep,
> !          iatomterm, and ixyzterm
> !     maxterms (input), number of rows in array amat and number of columns
> !          in arrays iatomterm and ixyzterm
> !     maxtermsindep (input), number of columns
> !          in arrays amat, iatomtermindep, and ixyztermindep
> !     maxtermszero (input), number of columns
> !          in arrays iatomtermzero and ixyztermzero
> !     maxgroups (input), maximum number of groups
1836,1837c1799,1800
<       integer nrank,maxrank,maxterms,maxtermsindep,maxgroups,
<      $     maxtermszero,ierz,iert,ieri,ierg
---
>       integer nrank,maxrank,maxterms,maxtermsindep,maxgroups,  &
>      &     maxtermszero,ierz,iert,ieri,ierg
1839,1848c1802,1811
<       integer i,j,k,m,n,nshell(natoms0),ngroups,nterm6(maxgroups),
<      $     iatomterm(maxrank,maxterms,maxgroups),ncount,
<      $     ixyzterm(maxrank,maxterms,maxgroups),
<      $     iatomtermindep(maxrank,maxterms,maxgroups),
<      $     ixyztermindep(maxrank,maxterms,maxgroups),
<      $     ishell,iatom,iatom0,iatomd(nrank),ixyz,ngroupsave,
<      $     ixyzd(nrank),nterms2,ncmp,icell(3),
<      $     ntermsindep(maxgroups),iatomd2(nrank),ixyzd2(nrank),
<      $     ntermszero,iatomtermzero(maxrank,maxtermszero),
<      $     ixyztermzero(maxrank,maxtermszero),ntermszerosave
---
>       integer i,j,k,m,n,nshell(natoms0),ngroups,nterm6(maxgroups),  &
>      &     iatomterm(maxrank,maxterms,maxgroups),ncount,  &
>      &     ixyzterm(maxrank,maxterms,maxgroups),  &
>      &     iatomtermindep(maxrank,maxterms,maxgroups),  &
>      &     ixyztermindep(maxrank,maxterms,maxgroups),  &
>      &     ishell,iatom,iatom0,iatomd(nrank),ixyz,ngroupsave,  &
>      &     ixyzd(nrank),nterms2,ncmp,icell(3),  &
>      &     ntermsindep(maxgroups),iatomd2(nrank),ixyzd2(nrank),  &
>      &     ntermszero,iatomtermzero(maxrank,maxtermszero),  &
>      &     ixyztermzero(maxrank,maxtermszero),ntermszerosave
1862c1825
< * check if input values are valid
---
> ! check if input values are valid
1872c1835
< * do each atom in unit cell
---
> ! do each atom in unit cell
1874c1837
< * find first nearest neighbor in list
---
> ! find first nearest neighbor in list
1878,1879c1841,1842
<             write(6,*)'Error in collect_force_constants: first '
<      $           //'nearest neighbor not found'
---
>             write(6,*)'Error in collect_force_constants: first '  &  
>      &           //'nearest neighbor not found'
1883,1884c1846,1847
< * try each atom for each position in denominator
< * begin with first nearest neighbor
---
> ! try each atom for each position in denominator
> ! begin with first nearest neighbor
1890c1853
< * next set of atoms
---
> ! next set of atoms
1896c1859
< * try each position in denominator
---
> ! try each position in denominator
1898c1861
< * try each atom in that position
---
> ! try each atom in that position
1900c1863
< * nearest neighbor to atom in cell at origin?
---
> ! nearest neighbor to atom in cell at origin?
1902c1865
< * nearest neighbor to all other atoms in denominator?
---
> ! nearest neighbor to all other atoms in denominator?
1909,1910c1872
<                   if(iatomneighbor(iatomcell0(j),m).gt.nshell(iatom0))
<      $                 cycle jloop
---
>                   if(iatomneighbor(iatomcell0(j),m).gt.nshell(iatom0)) cycle jloop
1912c1874
< * yes: put atom in denominator and get terms
---
> ! yes: put atom in denominator and get terms
1917c1879
< * done: try next atom in cell at origin
---
> ! done: try next atom in cell at origin
1920c1882
< * check if found yet
---
> ! check if found yet
1928c1890
< * found it: try next set of atoms
---
> ! found it: try next set of atoms
1936c1898
< * found it: try next set of atoms
---
> ! found it: try next set of atoms
1939,1940c1901,1902
< * did not find it: generate terms
< * all possible sets of coordinates
---
> ! did not find it: generate terms
> ! all possible sets of coordinates
1949,1951c1911,1912
< * check if found yet
<             call unique_force_constant(nrank,iatomd,ixyzd,
<      $           iatomd2,ixyzd2)
---
> ! check if found yet
>             call unique_force_constant(nrank,iatomd,ixyzd, iatomd2,ixyzd2)
1958c1919
< * found it: try next set of coordinates
---
> ! found it: try next set of coordinates
1967c1928
< * found it: try next set of coordinates
---
> ! found it: try next set of coordinates
1970c1931
< * did not find it: generate terms
---
> ! did not find it: generate terms
1979,1985c1940,1946
<             call force_constants(nrank,iatomd2,ixyzd2,
<      $           ntermsindep(ngroups),iatomtermindep(1,1,ngroups),
<      $           ixyztermindep(1,1,ngroups),nterm6(ngroups),
<      $           iatomterm(1,1,ngroups),ixyzterm(1,1,ngroups),
<      $           amat(1,1,ngroups),n,iatomtermzero(1,ntermszero+1),
<      $           ixyztermzero(1,ntermszero+1),maxrank,maxterms,
<      $           maxtermsindep,maxtermszero-ntermszero,ierz,iert,ieri)
---
>             call force_constants(nrank,iatomd2,ixyzd2,  &
>      &           ntermsindep(ngroups),iatomtermindep(1,1,ngroups),  &
>      &           ixyztermindep(1,1,ngroups),nterm6(ngroups),  &
>      &           iatomterm(1,1,ngroups),ixyzterm(1,1,ngroups),  &
>      &           amat(1,1,ngroups),n,iatomtermzero(1,ntermszero+1),  &
>      &           ixyztermzero(1,ntermszero+1),maxrank,maxterms,  &
>      &           maxtermsindep,maxtermszero-ntermszero,ierz,iert,ieri)
2000c1961
< * no nonzero terms in group
---
> ! no nonzero terms in group
2005c1966
< * next set of coordinates
---
> ! next set of coordinates
2007c1968
< * next set of atoms
---
> ! next set of atoms
2014,2021c1975,1978
<       write(*,3)' iatomtrmindep(rnk,1,ngroups)=',  
<      &  iatomtermindep(nrank,1,1:ngroups)
<       write(*,3)' ixyztermindep(rnk,1,ngroups)=',  
<      &  ixyztermindep(nrank,1,1:ngroups)
<       write(*,3)' iatomterm    (rnk,1,ngroups)=',  
<      &  iatomterm(nrank,1,1:ngroups)
<       write(*,3)' ixyzterm     (rnk,1,ngroups)=',
<      &  ixyzterm(nrank,1,1:ngroups)
---
>       write(*,3)' iatomtrmindep(rnk,1,ngroups)=', iatomtermindep(nrank,1,1:ngroups)
>       write(*,3)' ixyztermindep(rnk,1,ngroups)=', ixyztermindep(nrank,1,1:ngroups)
>       write(*,3)' iatomterm    (rnk,1,ngroups)=', iatomterm(nrank,1,1:ngroups)
>       write(*,3)' ixyzterm     (rnk,1,ngroups)=', ixyzterm(nrank,1,1:ngroups)
2027c1984
< *****************************************************************************
---
> !****************************************************************************
